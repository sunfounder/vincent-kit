# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, SunFounder
# This file is distributed under the same license as the SunFounder Vincent Kit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SunFounder Vincent Kit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-20 17:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../1.8_serial_read.rst:2
msgid "1.8 Serial Read"
msgstr ""

#: ../1.8_serial_read.rst:5
msgid "Overview"
msgstr ""

#: ../1.8_serial_read.rst:7
msgid "In addition to reading data from the electronic components, the Mega2560 board can read the data input in the serial port monitor, and you can use Serial.read() as the controller of the circuit experiment. Then we use LED to experiment with the Serial. Read() statement to control LED to turn on and off."
msgstr ""

#: ../1.8_serial_read.rst:14
msgid "Components Required"
msgstr ""

#: ../1.8_serial_read.rst:20
msgid "Refer to Part 2 to check details of hardware."
msgstr ""

#: ../1.8_serial_read.rst:22
msgid ":ref:`Part 2 Component`"
msgstr ""

#: ../1.8_serial_read.rst:25
msgid "Fritzing Circuit"
msgstr ""

#: ../1.8_serial_read.rst:27
msgid "In this example, we use digital pin 9 to drive LED. When 1 is entered in serial monitor, the LED lights up. When 0 is entered, the LED turns off."
msgstr ""

#: ../1.8_serial_read.rst:34
msgid "Schematic Diagram"
msgstr ""

#: ../1.8_serial_read.rst:40
msgid "Code"
msgstr ""

#: ../1.8_serial_read.rst:46
msgid "After the codes are uploaded to the Mega2560 board, please turn on the serial port monitor. Typing in ”1” can make LED turn on and typing in ”0” can make it turn off."
msgstr ""

#: ../1.8_serial_read.rst:52
msgid "Code Analysis"
msgstr ""

#: ../1.8_serial_read.rst:54
msgid "Declare digital pin 9 as ledPin."
msgstr ""

#: ../1.8_serial_read.rst:60
msgid "Serial.read() reads a single byte of ASCII value, and therefore you need to declare a int type variable, incomingByte to store the acquired data."
msgstr ""

#: ../1.8_serial_read.rst:66
msgid "Run the serial communication in setup() and set the data rate to 9600."
msgstr ""

#: ../1.8_serial_read.rst:72
msgid "Set ledPin to OUTPUT mode."
msgstr ""

#: ../1.8_serial_read.rst:78
msgid "The state of serial port monitor is judged in loop(), and the information processing will be carried out only when the data are received."
msgstr ""

#: ../1.8_serial_read.rst:84
msgid "Reads the input value in the serial port monitor and stores it to the variable incomingByte."
msgstr ""

#: ../1.8_serial_read.rst:90
msgid "When the character '1' is obtained, the LED is lit; when ’0’ is obtained, the LED turns off."
msgstr ""

#: ../1.8_serial_read.rst:98
msgid "Serial.read() takes the ASCII value in single character, which means that when you input '1', the obtained value is not the number '1', but the character '1' whose corresponding ASCII value is 49."
msgstr ""

#: ../1.8_serial_read.rst:101
msgid "※ ASCII chart"
msgstr ""

#: ../1.8_serial_read.rst:103
msgid "The ASCII (American Standard Code for Information Interchange) encoding dates to the 1960's. It is the standard way that text is encoded numerically."
msgstr ""

#: ../1.8_serial_read.rst:107
msgid "Note that the first 32 characters (0-31) are non-printing characters, often called control characters. The more useful characters have been labeled."
msgstr ""

#: ../1.8_serial_read.rst:115
msgid "Phenomenon Picture"
msgstr ""
