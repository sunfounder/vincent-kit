# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, SunFounder
# This file is distributed under the same license as the SunFounder Vincent Kit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SunFounder Vincent Kit \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-20 17:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../2.9_i2c_lcd1602_module.rst:2
msgid "2.9 I2C LCD1602 Module"
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:5
msgid "Overview"
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:7
msgid "In this lesson, you will learn about LCD1602. LCD1602, or 1602 character-type liquid crystal display, a kind of dot matrix module to show letters, numbers, characters and so on."
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:12
msgid "Components Required"
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:17
msgid "Component Introduction"
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:19
msgid "It's composed of 5x7 or 5x11 dot matrix positions; each position can display one character. There's a dot pitch between two characters and a space between lines, thus separating characters and lines. The number 1602 means on the display, 2 rows can be showed and 16 characters in each."
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:25
msgid "As we all know, though LCD and some other displays greatly enrich the man-machine interaction, they share a common weakness. When they are connected to a controller, multiple IOs will be occupied of the controller which has no so many outer ports. Also it restricts other functions of the controller. Therefore, LCD1602 with an I2C bus is developed to solve the problem."
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:35
msgid "I2C communication"
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:37
msgid "I2C(Inter-Integrated Circuit) bus is a very popular and powerful bus for communication between a master device (or master devices) and a single or multiple slave devices. I2C main controller can be used to control IO expander, various sensors, EEPROM, ADC/DAC and so on. All of these are controlled only by the two pins of host, the serial data (SDA) line and the serial clock line(SCL)."
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:47
msgid "Fritzing Circuit"
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:49
msgid "In this example, we will get the first pin GND of LCD1602 connected to GND, the second pin VCC to 5V, the third pin SDA to the pin SDA 20 and the forth pin SCL to the pin SCL 21."
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:56
msgid "Schematic Diagram"
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:61
msgid "The SDA and SCL of the Mega2560 board are the pins 20 and 21."
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:64
msgid "Code"
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:66
msgid "The libraries Wire.h and LiquidCrystal_I2C.h are used in these codes, Wire.h is built in Arduino, but LiquidCrystal_I2C.h needs adding manually. Add Method: Refer to **Part 4 - 4.1 Add Libraries**"
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:68
msgid "`LiquidCrystal_I2C.h <https://github.com/sunfounder/sunfounder_vincent_kit_for_arduino/tree/master/library>`_"
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:70
msgid ":ref:`4.1 Add Libraries`"
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:76
msgid "Upload the codes to the Mega2560 board, the content that you input in the serial monitor will be printed on the LCD."
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:79
msgid "About the ASCII code and the character input in the serial monitor, please refer to Part 1-1.8 Serial Read."
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:81
msgid ":ref:`1.8 Serial Read`"
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:85
msgid "Code Analysis"
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:87
msgid "By calling the library LiquidCrystal_I2C.h, you can easily drive the LCD."
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:93
msgid "**Library Functionsï¼š**"
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:99
msgid "Creates a new instance of the LiquidCrystal_I2C class that represents a particular LCD attached to your Arduino board."
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:102
msgid "**lcd_AddR**: The address of the LCD defaults to 0x27."
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:104
msgid "**lcd_cols**: The LCD1602 has 16 columns."
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:106
msgid "**lcd_rows**: The LCD1602 has 2 rows."
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:113
msgid "Initialize the lcd."
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:119
msgid "Turn the (optional) backlight on."
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:125
msgid "Turn the (optional) backlight off."
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:131
msgid "Turn the LCD display on."
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:137
msgid "Turn the LCD display off quickly."
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:143
msgid "Clear display, set cursor position to zero."
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:149
msgid "Set the cursor position to col,row."
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:155
msgid "Prints text to the LCD."
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:157
msgid "**data**: The data to print (char, byte, int, long, or string)."
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:159
msgid "**BASE (optional)**: The base in which to print numbers: BIN for binary (base 2), DEC for decimal (base 10), OCT for octal (base 8), HEX for hexadecimal (base 16)."
msgstr ""

#: ../2.9_i2c_lcd1602_module.rst:162
msgid "Phenomenon Picture"
msgstr ""
